void generateGPUData()
{
    states.clear();
    transitions.clear();

    uint32_t currentPadding = 0;

    auto automateStates = automate.getStates();

    for(int i = 0; i < automateStates.size(); i++)
    {
        states.emplace_back(automateStates[i].getNumberTransform(), currentPadding);
        auto stateTransition = automateStates[i].getTransitions();

        for(int j = 0; j < stateTransition.size(); j++)
        {
            transitions.emplace_back(stateTransition[j].getTransform(), stateTransition[j].getNextState());
        }

        currentPadding += stateTransition.size();

    }
}

void sendAutomatonGPU()
{
    codes.clear();

    auto start = std::chrono::high_resolution_clock::now();

    codes = automate.encode2(nbIteration);
    auto end = std::chrono::high_resolution_clock::now();

    std::chrono::duration<double> duration = end - start;
    std::cout << "Time Encode: " << duration.count() * 1000 << " ms" << std::endl;

    nbInstance = codes.size();

    generateGPUData();
    updateSSBO();

    GLuint query;
    glGenQueries(1, &query);


    //Now dispatch the decoder shader
    glUseProgram(computeProgram);
    glUniform1ui(uni_compNbIteration, nbIteration);
    glUniform1ui(uni_compNbInstance, nbInstance);

    glBeginQuery(GL_TIME_ELAPSED, query);
    glDispatchCompute((nbInstance + 31) / 32, 1, 1);

    glEndQuery(GL_TIME_ELAPSED);
    glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);
    glUseProgram(0);

    GLuint64 elapsedTime = 0;
    do {
        glGetQueryObjectui64v(query, GL_QUERY_RESULT_AVAILABLE, &elapsedTime);
    } while (!elapsedTime);

    glGetQueryObjectui64v(query, GL_QUERY_RESULT, &elapsedTime);

    std::cout << "Compute shader execution time: " << elapsedTime / 1e6 << " ms" << std::endl;

    glDeleteQueries(1, &query);

}