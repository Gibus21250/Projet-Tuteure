#version 450

uniform uint nbIteration;
uniform uint nbInstances;

layout(std430, binding = 0) restrict writeonly buffer Decoded {
    mat4 matrices[];
} decoded;

struct StateData {
    uint nbTransform;       //Number of transform
    uint padding;           //Number of tranform to jump above for the tranform array
};

//Buffer containing states informations, and a special padding value to jump to state's tranforms info
layout(std430, binding = 1) restrict readonly buffer StateInfo {
    StateData states[];
} stateInfo;

struct TransitionData {
    mat4 mat;
    uint nextState;
};

//Buffer containing all matrices and the next state
layout(std430, binding = 2) restrict readonly buffer TransitionInfo {
    TransitionData transitions[];
} transitionInfo;

//Buffer of all encode path
layout(std430, binding = 3) restrict readonly buffer CodeInfo {
    double code[];
} codeInfo;

#define nb_states 2
#define nb_transition 6

shared StateData lsm_states[nb_states];
shared TransitionData lsm_transitions[nb_transition];

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main() {

    uint globalID = gl_GlobalInvocationID.x;

    if (globalID >= nbInstances) {
        return;
    }

    //Fetch automaton to the LSM (Local Shared Memory) to reduce latency (20% faster)
    if(gl_LocalInvocationID.x < nb_states) {
        lsm_states[gl_LocalInvocationID.x] = stateInfo.states[gl_LocalInvocationID.x];
    }

    if(gl_LocalInvocationID.x < nb_transition) {
        lsm_transitions[gl_LocalInvocationID.x] = transitionInfo.transitions[gl_LocalInvocationID.x];
    }

    barrier();

    double code = codeInfo.code[globalID];

    mat4 model = mat4(1.0f); // Eye
    uint currentState = 0; //Start state 0

    for (uint j = 0; j < nbIteration; j++) {

        const float stateStep = 1.0f / float(stateInfo.states[currentState].nbTransform);
        const uint transformIndex = uint(floor(code / stateStep));

        //Copy
        StateData sInfo = lsm_states[currentState];
        TransitionData tInfo = lsm_transitions[sInfo.padding + transformIndex];

        //Accumulate transforms
        model = tInfo.mat * model;
        //Get next state
        currentState = tInfo.nextState;

        //Rescale encoded value for the next decoding iteration
        const float lower = float(transformIndex) * stateStep;
        const float upper = float(transformIndex + 1) * stateStep;
        code = (code - lower) / (upper - lower);

    }

    decoded.matrices[globalID] = model;


}